package schoo.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.Calendar;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import schoo.entity.Event;
import schoo.entity.ImageEntity;
import schoo.form.DaysForm;
import schoo.form.EventForm;
import schoo.form.UserListForm;
import schoo.repository.ImageRepository;
import schoo.service.UserEntryService;
import schoo.service.EventService;
import schoo.service.UserListService;

/**
 * Springで作成する簡単なDB出力のサンプルクラスです.
 */
@Controller
public class SchooController {

	@Autowired
	UserListService userListService;

	/**
	 * トップページへのリクエスト
	 * 
	 * @return output.htmlのパス
	 */
	@GetMapping("/")
	public String index(Model model) {
		return "login";
	}

	// POSTメソッド
	/*
	 * @PostMapping("/login") private String init(Model model,UserListForm
	 * userListForm) { String pass = userListForm.getPass(); String name =
	 * userListForm.getName(); UserList userList =
	 * userListService.findByUserList(name,pass); model.addAttribute("userList",
	 * userList); return "login_ok";
	 * 
	 * }
	 */

	@PostMapping("/login")
	public String login(Model model, UserListForm form, HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {
		HttpSession session = request.getSession();
		session.setAttribute("session1", form.getName());
		var userInfo = userListService.searchUserById(form.getName());
		session.setAttribute("session2", userInfo.get().getUserId());
		var isCorrectUserAuth = userInfo.isPresent() && form.getPass().equals(userInfo.get().getPass());
		if (isCorrectUserAuth) {
			List<Event> eventList = eventService.findAll();
			model.addAttribute("eventList", eventList);
			model.addAttribute("userInfo", session.getAttribute("session1"));
			return "redirect:eventList";
		} else {
			model.addAttribute("errorMsg", "名前とPASSの組み合わせが間違っています。");
			return "login";
		}
	}

	@PostMapping("add")
	public String addUser(Model model, @Validated UserListForm userListForm, BindingResult bindingResult)
			throws IOException {
		if (bindingResult.hasErrors()) {
			return "validated";
		}
		String pass = userListForm.getPass();
		String pass2 = userListForm.getPass2();
		var userInfo = userListService.searchUserById(userListForm.getName());
		var isCorrectUserAuth = userInfo.isPresent();
		if (!isCorrectUserAuth) {
			if (pass.equals(pass2)) {
				userListService.save(userListForm.getName(), pass);
				model.addAttribute("addMsg", "新規登録が完了しました。");
				return "login";
			} else {
				model.addAttribute("errorMsg", "入力内容が間違っています。");
				return "output";
			}
		} else {
			model.addAttribute("errorMsg", "このユーザー名はすでに使用されています。");
			return "output";
		}
	}

	@GetMapping("/login")
	public String login(Model model) {
		return "redirect:/";
	}

	@GetMapping("/logout")
	public String logout(Model model) {
		return "redirect:/";
	}

	@GetMapping("/output")
	public String output(Model model) {
		return "output";
	}
	@GetMapping("/down")
	public String down(Model model,DaysForm form, HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		HttpSession session = request.getSession();
		int month=0;
		if(session.getAttribute("month1")!=null) {
		month = (int)session.getAttribute("month1");
		}else {
			month = 1;
			}
		if(month>1) {
			month=month-1;
		}else {month = 1;}
			form.setMonth(month);
		session.setAttribute("month1", form.getMonth());
		if(form.getMonth()>0) {
		model.addAttribute("month",Integer.toString(form.getMonth()));
		}
		return "taskList";
	}
	@GetMapping("/up")
	public String up(Model model,DaysForm form, HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		HttpSession session = request.getSession();
		int month=0;
		if(session.getAttribute("month1")!=null) {
		month = (int)session.getAttribute("month1");
		}else {
			month = 1;
			}
		if(month<12) {
			month=month+1;
		}else {
			month = 12;
			}
			form.setMonth(month);
		session.setAttribute("month1", form.getMonth());
		if(form.getMonth()<13) {
			model.addAttribute("month",Integer.toString(form.getMonth()));
			}
		return "taskList";
	}
	
	@GetMapping("/taskList")
	public String taskList(Model model,UserListForm form, HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		HttpSession session = request.getSession();
		session.setAttribute("month1", 1);
		model.addAttribute("month",session.getAttribute("month1"));
		String[] taskList = new String[30];
		
		model.addAttribute("userInfo", session.getAttribute("session1"));
		model.addAttribute("taskList", taskList);
		return "taskList";
	}

	/*
	 * @GetMapping("delete") public String deleteUser(@RequestParam Integer id) { //
	 * 指定されたIDを引数に削除処理へ userListService.delete(id); return "redirect:/"; }
	 */

	// 以下はイベント管理ツールから引用
	@Autowired
	EventService eventService;
	@Autowired
	UserEntryService userEntryService;

	/**
	 * トップページ（イベント一覧画面）を表示します.
	 * 
	 * @param model
	 * @return イベント一覧画面のパス
	 */
	@GetMapping("eventList")
	public String eventList(Model model,UserListForm form, HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		HttpSession session = request.getSession();
		List<Event> eventList = eventService.findByUserId((int) session.getAttribute("session2"));
		model.addAttribute("userInfo", session.getAttribute("session1"));
		model.addAttribute("eventList", eventList);
		return "eventList";
	}

	/**
	 * イベントの登録画面を表示します.
	 * 
	 * @param model
	 * @return イベント登録画面のパス
	 */
	@GetMapping("regist")
	public String regist(Model model) {
		// 次に表示する画面のパス（htmlファイルの名称）を返却
		return "regist";
	}

	/**
	 * イベントの登録処理です.
	 * 
	 * @param eventForm イベント情報
	 * @return イベント一覧画面のパス（output.htmlへのリダイレクト）
	 */
	@Autowired
	private ImageRepository imageRepository;

	private static final String UPLOAD_DIR = "/Users/桑田 龍/eclipse-workspace/ProgressManagement/src/main/resources/static/image"; // アップロード先のディレクトリ

	@SuppressWarnings("resource")
	@PostMapping("eventregist")
	public String registrationEvent(@RequestParam("file") MultipartFile file, RedirectAttributes redirectAttributes,
			@ModelAttribute EventForm eventForm,HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		try {
			// アップロードディレクトリが存在しない場合、作成
			File uploadDir = new File(UPLOAD_DIR);
			if (!uploadDir.exists()) {
				uploadDir.mkdirs();
			}

			if (file.getOriginalFilename() != "") {
				// 画像ファイルの保存先パス
				String filePath = UPLOAD_DIR + File.separator + file.getOriginalFilename();

				// 画像ファイルをディスクに保存
				Path destination = new File(filePath).toPath();
				Files.copy(file.getInputStream(), destination, StandardCopyOption.REPLACE_EXISTING);

				// データベースにファイルメタデータを保存
				ImageEntity imageEntity = new ImageEntity();
				imageEntity.setName(file.getOriginalFilename());
				imageEntity.setFilePath(filePath);
				eventForm.setFilePath(file.getOriginalFilename());
				imageRepository.save(imageEntity);
			}
			// フォームから値を取得してデータベース登録処理へ
			HttpSession session = request.getSession();
			eventForm.setUserId((int) session.getAttribute("session2"));
			eventService.save(eventForm);

			redirectAttributes.addFlashAttribute("message", "File uploaded successfully!");
		} catch (IOException e) {
			System.out.println("IOExceptionエラー");
			redirectAttributes.addFlashAttribute("uperror", "Failed to upload file: " + e.getMessage());
		}

		// 次に表示する画面のパス（リダイレクト先のページ）を返却
		return "redirect:eventList";
	}
	
	//タスク削除
	@GetMapping("delete")
	public String deleteEvent(@RequestParam Integer eventId) {
		// 指定されたIDを引数に削除処理へ
		eventService.delete(eventId);
		return "redirect:eventList";
	}
}